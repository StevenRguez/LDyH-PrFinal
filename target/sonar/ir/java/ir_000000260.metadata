domain.game.Game#playCard(Ljava/util/UUID;Ldomain/card/Card;Z)V
false
e8d75df941639090adcf9a4e1e123be0
domain.common.DomainEventPublisher#publish(Ldomain/common/DomainEvent;)V
domain.game.Game#acceptPlayedCard(Ldomain/card/Card;Z)V
domain.game.Game#checkActionCardRule(Ldomain/card/Card;)V
domain.game.Game#checkNumberCardRule(Ldomain/card/Card;)V
domain.game.Game#checkWildCardRule(Ldomain/card/Card;)V
domain.game.Game#drawFourCards(Ldomain/player/Player;)V
domain.game.Game#drawTwoCards(Ldomain/player/Player;)V
domain.game.Game#rejectPlayedCard(Ldomain/card/Card;)V
domain.game.Game#reverse()V
domain.game.Game#validatePlayedCard(Ljava/util/UUID;Ldomain/card/Card;)V
domain.game.events.CardPlayed#<init>(Ljava/util/UUID;Ldomain/card/Card;)V
domain.game.events.CardPlayed#instance-init#
domain.game.events.GameOver#<init>(Ldomain/player/ImmutablePlayer;)V
domain.game.events.GameOver#instance-init#
java.lang.IllegalStateException#<init>(Ljava/lang/String;)V
java.lang.IllegalStateException#instance-init#
java.time.Instant#now()Ljava/time/Instant;
==
get java.util.Map#get(Ljava/lang/Object;)Ljava/lang/Object;
getCurrentPlayer domain.game.Game#getCurrentPlayer()Ldomain/player/ImmutablePlayer;
getCurrentPlayer domain.player.PlayerRoundIterator#getCurrentPlayer()Ldomain/player/Player;
getGameDuration domain.game.Game#getGameDuration()Ljava/lang/String;
getName domain.player.ImmutablePlayer#getName()Ljava/lang/String;
getOrDefault java.util.Map#getOrDefault(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
getType domain.card.Card#getType()Ldomain/card/CardType;
info java.util.logging.Logger#info(Ljava/lang/String;)V
isOver domain.game.Game#isOver()Z
next domain.player.PlayerRoundIterator#next()Ldomain/player/Player;
println java.io.PrintStream#println(Ljava/lang/String;)V
put java.util.Map#put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;